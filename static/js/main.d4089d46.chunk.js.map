{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["index","visible","loading","resMsg","data","message","render","modalWidth","modalHeight","this","title","width","height","bodyStyle","onOk","confirmLoading","onCancel","handleCloseButtonOnClick","style","paddingLeft","paddingRight","overflow","className","props","Component","propTypes","PropTypes","hasMask","maskClosable","okText","cancelText","draggable","footerActions","okButtonLoading","onClose","onClosed","children","footer","destroyOnClose","bool","defaultProps","App","handleButtonOnClick","myModal","openModal","handleModalOnClosed","console","log","handleModalOnOk","Promise","resolve","reject","setTimeout","padding","type","ref","node","ReactDOM","document","getElementById"],"mappings":"8oBAYqBA,c,QAkCjB,cAAmB,aACf,wBADe,UASP,WACR,WAAc,CACVC,SAAS,KAXE,aAeN,WACL,QAAJ,SACI,kBAEJ,WAAc,CACVA,SADU,EAEVC,SAAS,KArBE,2BAyBQ,WACvB,gBA1Be,qBA6BE,WACb,QAAJ,UACI,oBA/BW,wBAmCK,WAChB,QAAJ,OACI,oBAAW,QAAP,iBACA,WAAc,CACVA,SAAS,IAEb,gBACI,qBAEU,YACF,KAAU,CACN,IAAIC,GAAS,OAAAC,QAAI,IAAJA,OAAA,EAAAA,EAAA,UAAb,GACID,GAAJ,IAAcA,GACVE,eAGR,WACI,CACIH,SAAS,IAEb,WACI,mCAdhB,OAkBW,YACH,KAAW,OACHC,GAAS,UAAAC,YAAA,yBAAb,GACID,GAAJ,IAAcA,GACVE,aAIR,WAAc,CACVH,SAAS,QAIzB,cAAmB,QAAnB,SAtER,QAAa,CACTD,SADS,EAETC,SAAS,GALE,E,mGA8EnBI,kBACI,IAAIC,EAAJ,GACIC,EAAJ,GAEA,EAA6BC,KAA7B,MAAQR,EAAR,UAAiBC,EAAjB,UACA,EAA4CO,KAA5C,MAAQC,EAAR,QAAeC,EAAf,QAAsBC,EAAtB,SAA8BC,EAA9B,YAcA,OAXIN,EADAI,kBAA0BA,gBAA1BA,GAAqDA,gBAAzD,EACIJ,EAEaI,EAAbJ,KAIAC,EADAI,kBAA2BA,gBAA3BA,GAAuDA,gBAA3D,EACIJ,EAEcI,EAAdJ,KAIA,uBACIE,MADJ,EAEIC,MAFJ,EAGIC,OAHJ,EAIIX,QAJJ,EAKIa,KAAML,KALV,sBAMIM,eANJ,EAOIC,SAAUP,KAAKQ,0BAEf,yBACIC,MAAK,GAKDC,YALC,GAMDC,aANC,GAODC,SAAU,QARlB,GAWIC,UAAU,aAETb,KAAKc,MAvBlB,Y,EAnIavB,CAAcwB,WAAdxB,EACVyB,UAAY,CACff,MAAOgB,IADQ,OAEff,MAAOe,IAFQ,OAGfd,OAAQc,IAHO,OAKfC,QAASD,IALM,KAMfE,aAAcF,IANC,KAOfG,OAAQH,IAPO,OAQfI,WAAYJ,IARG,OASfK,UAAWL,IATI,KAYfM,cAAeN,IAZA,MAafO,gBAAiBP,IAbF,KAcfQ,QAASR,IAdM,KAefS,SAAUT,IAfK,KAgBfZ,KAAMY,IAhBS,KAkBfb,UAAWa,IAlBI,OAmBfU,SAAUV,IAnBK,IAoBfW,OAAQX,IApBO,IAqBfY,eAAgBZ,IAAUa,MAtBbvC,EAyBVwC,aAAe,CAClBb,SADkB,EAElBC,cAFkB,EAGlBG,WAHkB,EAIlBO,gBAJkB,EAKlB3B,MALkB,MAMlBC,OAAQ,O,QC/BK6B,E,4MACjBC,oBAAsB,WAClB,EAAKC,QAAQC,a,EAGjBC,oBAAsB,WAClBC,QAAQC,IAAI,4B,EAGhBC,gBAAkB,WACd,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACPF,EAAQ,CAAE7C,QAAS,OACpB,S,4CAIX,WAAU,IAAD,OACL,OACI,yBAAKa,MAAO,CAAEmC,QAAS,KACnB,kBAAC,IAAD,CAAQC,KAAM,WAAd,gBAEA,kBAAC,EAAD,CACIC,IAAK,SAACC,GAAD,OAAW,EAAKb,QAAUa,GAC/B9C,MAAO,2BACPiB,SAAS,EACThB,MAAO,MACPC,OAAQ,MAERsB,QAASzB,KAAKoC,oBACd7B,SAAUP,KAAKoC,oBACfV,SAAU1B,KAAKoC,oBACf/B,KAAML,KAAKuC,iBAEX,2E,GAlCaxB,aCNjCiC,IAASnD,OAAO,kBAAC,EAAD,MAASoD,SAASC,eAAe,W","file":"static/js/main.d4089d46.chunk.js","sourcesContent":["/*\n * @Author: devfpy\n * @Date: 2022-03-25 15:13:13\n * @LastEditors: devfpy\n * @LastEditTime: 2022-03-25 18:04:33\n * @FilePath: /anchor-components-modal-antd/src/index.js\n * @Description:\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, message } from 'antd';\n\nexport default class index extends Component {\n    static propTypes = {\n        title: PropTypes.string, // 标题\n        width: PropTypes.string, // 宽度\n        height: PropTypes.string, // 高度\n\n        hasMask: PropTypes.bool, // 是否显示遮罩层\n        maskClosable: PropTypes.bool, // 点击蒙层是否允许关闭\n        okText: PropTypes.string, // 确定按钮显示的文字\n        cancelText: PropTypes.string, // 取消按钮显示的文字\n        draggable: PropTypes.bool, // 是否允许拖拽\n\n        // footerAlign: PropTypes.string,\n        footerActions: PropTypes.array, // 底部需要显示的按钮\n        okButtonLoading: PropTypes.bool, // 当okButtonLoading属性设置后，okButton的loading状态通过该属性管理\n        onClose: PropTypes.func, // onCancel onClose 弹窗关闭事件\n        onClosed: PropTypes.func, // afterClose 弹窗已经关闭\n        onOk: PropTypes.func, // parent component return a promise, success后 关闭modal\n\n        bodyStyle: PropTypes.object,\n        children: PropTypes.any,\n        footer: PropTypes.any,\n        destroyOnClose: PropTypes.bool\n    };\n\n    static defaultProps = {\n        hasMask: true,\n        maskClosable: true,\n        draggable: true,\n        destroyOnClose: true,\n        width: '400',\n        height: '320'\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            visible: false,\n            loading: false\n        };\n    }\n\n    openModal = () => {\n        this.setState({\n            visible: true\n        });\n    };\n\n    closeModal = () => {\n        if (this.props.onClose) {\n            this.props.onClose();\n        }\n        this.setState({\n            visible: false,\n            loading: false\n        });\n    };\n\n    handleCloseButtonOnClick = () => {\n        this.closeModal();\n    };\n\n    handleOnAfterClose = () => {\n        if (this.props.onClosed) {\n            this.props.onClosed();\n        }\n    };\n\n    handleOkButtonOnClick = () => {\n        if (this.props.onOk) {\n            if (typeof this.props.okButtonLoading == 'undefined') {\n                this.setState({\n                    loading: true\n                });\n                this.props.onOk() &&\n                    this.props\n                        .onOk()\n                        .then((data) => {\n                            if (data) {\n                                let resMsg = data?.message || '';\n                                if (resMsg && resMsg != '') {\n                                    message.success(resMsg);\n                                }\n                            }\n                            this.setState(\n                                {\n                                    loading: false\n                                },\n                                () => {\n                                    this.handleCloseButtonOnClick();\n                                }\n                            );\n                        })\n                        .catch((error) => {\n                            if (error) {\n                                let resMsg = data?.message || '';\n                                if (resMsg && resMsg != '') {\n                                    message.error(resMsg);\n                                }\n                            }\n\n                            this.setState({\n                                loading: false\n                            });\n                        });\n            } else {\n                this.props.onOk && this.props.onOk();\n            }\n        }\n    };\n\n    render() {\n        let modalWidth = '';\n        let modalHeight = '';\n\n        const { visible, loading } = this.state;\n        const { title, width, height, bodyStyle } = this.props;\n\n        if (width.indexOf('%') > 0 || width.indexOf('px') > 0 || width.indexOf('PX') > 0) {\n            modalWidth = width;\n        } else {\n            modalWidth = width + 'px';\n        }\n\n        if (height.indexOf('%') > 0 || height.indexOf('px') > 0 || height.indexOf('PX') > 0) {\n            modalHeight = height;\n        } else {\n            modalHeight = height + 'px';\n        }\n\n        return (\n            <Modal\n                title={title}\n                width={modalWidth}\n                height={modalHeight}\n                visible={visible}\n                onOk={this.handleOkButtonOnClick}\n                confirmLoading={loading}\n                onCancel={this.handleCloseButtonOnClick}\n            >\n                <div\n                    style={{\n                        // overflow: 'auto',\n                        // overflowY: 'auto',\n                        // overflowX: 'hidden',\n                        // overflowY: 'hidden',\n                        paddingLeft: 12,\n                        paddingRight: 12,\n                        overflow: 'auto',\n                        ...bodyStyle\n                    }}\n                    className=\"scrollbar\"\n                >\n                    {this.props.children}\n                </div>\n            </Modal>\n        );\n    }\n}\n","/*\n * @Author: devfpy\n * @Date: 2022-03-25 15:13:13\n * @LastEditors: devfpy\n * @LastEditTime: 2022-03-25 17:56:42\n * @FilePath: /anchor-components-modal-antd/example/src/App.js\n * @Description:\n */\nimport React, { Component } from 'react';\nimport { Button } from 'antd';\nimport ModalComponent from 'anchor-components-modal-antd';\n\nexport default class App extends Component {\n    handleButtonOnClick = () => {\n        this.myModal.openModal();\n    };\n\n    handleModalOnClosed = () => {\n        console.log('.......... modal closed');\n    };\n\n    handleModalOnOk = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve({ message: '' });\n            }, 2000);\n        });\n    };\n\n    render() {\n        return (\n            <div style={{ padding: 16 }}>\n                <Button type={'primary'}>弹窗</Button>\n\n                <ModalComponent\n                    ref={(node) => (this.myModal = node)}\n                    title={'弹窗标题'}\n                    hasMask={true}\n                    width={'760'}\n                    height={'680'}\n                    // okButtonLoading={confirming}\n                    onClose={this.handleModalOnClosed}\n                    onCancel={this.handleModalOnClosed}\n                    onClosed={this.handleModalOnClosed}\n                    onOk={this.handleModalOnOk}\n                >\n                    <div>我是弹窗内容</div>\n                </ModalComponent>\n            </div>\n        );\n    }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}